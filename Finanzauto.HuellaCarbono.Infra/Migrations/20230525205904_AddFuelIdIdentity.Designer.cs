// <auto-generated />
using System;
using Finanzauto.HuellaCarbono.Infra.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Finanzauto.HuellaCarbono.Infra.Migrations
{
    [DbContext(typeof(HuellaCarbonoDbContext))]
    [Migration("20230525205904_AddFuelIdIdentity")]
    partial class AddFuelIdIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("hhcc")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.brand", b =>
                {
                    b.Property<int>("brnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("brnId"));

                    b.Property<string>("brnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("brnId");

                    b.ToTable("Brands", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.brandType", b =>
                {
                    b.Property<int>("brtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("brtId"));

                    b.Property<int>("brnId")
                        .HasColumnType("int");

                    b.Property<int>("typId")
                        .HasColumnType("int");

                    b.HasKey("brtId");

                    b.HasIndex("brnId");

                    b.HasIndex("typId");

                    b.ToTable("BrandTypes", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.fuel", b =>
                {
                    b.Property<int>("fueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("fueId"));

                    b.Property<string>("fueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("fueId");

                    b.ToTable("Fuels", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.identity", b =>
                {
                    b.Property<int>("idnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idnId"));

                    b.Property<int>("fueId")
                        .HasColumnType("int");

                    b.Property<string>("idnDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("idnEquivalence")
                        .HasColumnType("float");

                    b.Property<string>("idnImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idnOrden")
                        .HasColumnType("int");

                    b.HasKey("idnId");

                    b.HasIndex("fueId");

                    b.ToTable("Identities", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.line", b =>
                {
                    b.Property<int>("linId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("linId"));

                    b.Property<string>("EmisionesCO2_GrKm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("brnId")
                        .HasColumnType("int");

                    b.Property<string>("codigoFasecolda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fueId")
                        .HasColumnType("int");

                    b.Property<string>("huellaCarbono_TonKm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("linYear")
                        .HasColumnType("int");

                    b.Property<int>("typId")
                        .HasColumnType("int");

                    b.HasKey("linId");

                    b.HasIndex("brnId");

                    b.HasIndex("fueId");

                    b.HasIndex("typId");

                    b.ToTable("Lines", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.record", b =>
                {
                    b.Property<int>("recId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("recId"));

                    b.Property<int>("linId")
                        .HasColumnType("int");

                    b.Property<double>("recCalculateTnKm")
                        .HasColumnType("float");

                    b.Property<DateTime>("recCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("recEmisionGrKm")
                        .HasColumnType("float");

                    b.Property<double>("recEmisionTnKm")
                        .HasColumnType("float");

                    b.Property<int>("recKm")
                        .HasColumnType("int");

                    b.HasKey("recId");

                    b.HasIndex("linId");

                    b.ToTable("Records", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.type", b =>
                {
                    b.Property<int>("typId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("typId"));

                    b.Property<int>("averague")
                        .HasColumnType("int");

                    b.Property<string>("typName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("typId");

                    b.ToTable("Types", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.user", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("usrEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usrLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usrName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usrPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usrUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "hhcc");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreate = new DateTime(2023, 5, 25, 15, 59, 4, 35, DateTimeKind.Local).AddTicks(7490),
                            DateUpdate = new DateTime(2023, 5, 25, 15, 59, 4, 35, DateTimeKind.Local).AddTicks(7523),
                            State = true,
                            usrEmail = "elgaraje@finanzauto.com.co",
                            usrLastName = "S.A.",
                            usrName = "Finanzauto",
                            usrPassword = "NewEfRiB.#23",
                            usrUserName = "DevNovedades"
                        });
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.brandType", b =>
                {
                    b.HasOne("Finanzauto.HuellaCarbono.Domain.brand", "fkbrand")
                        .WithMany("GetBrandTypes")
                        .HasForeignKey("brnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finanzauto.HuellaCarbono.Domain.type", "fktype")
                        .WithMany("GetTypeBrands")
                        .HasForeignKey("typId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkbrand");

                    b.Navigation("fktype");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.identity", b =>
                {
                    b.HasOne("Finanzauto.HuellaCarbono.Domain.fuel", "fkFuelIdent")
                        .WithMany("GetIdentLogic")
                        .HasForeignKey("fueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkFuelIdent");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.line", b =>
                {
                    b.HasOne("Finanzauto.HuellaCarbono.Domain.brand", "fkbrands")
                        .WithMany("GetBrands")
                        .HasForeignKey("brnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finanzauto.HuellaCarbono.Domain.fuel", "fkfuel")
                        .WithMany("GetFuel")
                        .HasForeignKey("fueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finanzauto.HuellaCarbono.Domain.type", "fktypes")
                        .WithMany("GetTypes")
                        .HasForeignKey("typId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkbrands");

                    b.Navigation("fkfuel");

                    b.Navigation("fktypes");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.record", b =>
                {
                    b.HasOne("Finanzauto.HuellaCarbono.Domain.line", "Line")
                        .WithMany("GetRecords")
                        .HasForeignKey("linId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.brand", b =>
                {
                    b.Navigation("GetBrandTypes");

                    b.Navigation("GetBrands");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.fuel", b =>
                {
                    b.Navigation("GetFuel");

                    b.Navigation("GetIdentLogic");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.line", b =>
                {
                    b.Navigation("GetRecords");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.type", b =>
                {
                    b.Navigation("GetTypeBrands");

                    b.Navigation("GetTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
