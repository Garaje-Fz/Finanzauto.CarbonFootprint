// <auto-generated />
using Finanzauto.HuellaCarbono.Infra.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Finanzauto.HuellaCarbono.Infra.Migrations
{
    [DbContext(typeof(HuellaCarbonoDbContext))]
    partial class HuellaCarbonoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("hhcc")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.Identity", b =>
                {
                    b.Property<int>("idnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idnId"));

                    b.Property<string>("idnDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("idnEquivalence")
                        .HasColumnType("float");

                    b.Property<string>("idnImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idnOrden")
                        .HasColumnType("int");

                    b.HasKey("idnId");

                    b.ToTable("Identities", "hhcc");

                    b.HasData(
                        new
                        {
                            idnId = 1,
                            idnDescription = "Compensado con la siembra de 15 plántulas (árboles jóvenes) asumiendo una esperanza de vida de 10 años.",
                            idnEquivalence = 15.0,
                            idnImage = "Arboles",
                            idnName = "Compensacion en arboles.",
                            idnOrden = 1
                        },
                        new
                        {
                            idnId = 2,
                            idnDescription = "Cargar 110352 teléfonos celulares inteligentes.",
                            idnEquivalence = 110352.0,
                            idnImage = "Celulares.",
                            idnName = "Consumo cargar celulares.",
                            idnOrden = 2
                        },
                        new
                        {
                            idnId = 3,
                            idnDescription = "Realizar 9 viajes de Bogotá a San Andrés en avión..",
                            idnEquivalence = 9.0,
                            idnImage = "Viajes.",
                            idnName = "Consumo viajes a San Andres.",
                            idnOrden = 3
                        },
                        new
                        {
                            idnId = 4,
                            idnDescription = "Mantener encendido 4,5 computadores durante 5 días a la semana, 9 horas al día, durante un año.",
                            idnEquivalence = 4.5,
                            idnImage = "Computadores",
                            idnName = "Consumo en computadores.",
                            idnOrden = 4
                        },
                        new
                        {
                            idnId = 5,
                            idnDescription = "Producir 3,39 kg de carne de vaca.",
                            idnEquivalence = 3.3900000000000001,
                            idnImage = "Carne",
                            idnName = "Consumo en carne.",
                            idnOrden = 5
                        });
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.brand", b =>
                {
                    b.Property<int>("brnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("brnId"));

                    b.Property<string>("brnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("brnId");

                    b.ToTable("Brands", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.brandType", b =>
                {
                    b.Property<int>("brtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("brtId"));

                    b.Property<int>("brnId")
                        .HasColumnType("int");

                    b.Property<int>("typId")
                        .HasColumnType("int");

                    b.HasKey("brtId");

                    b.HasIndex("brnId");

                    b.HasIndex("typId");

                    b.ToTable("BrandTypes", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.fuel", b =>
                {
                    b.Property<int>("fueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("fueId"));

                    b.Property<string>("fueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("fueId");

                    b.ToTable("Fuels", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.line", b =>
                {
                    b.Property<int>("linId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("linId"));

                    b.Property<string>("EmisionesCO2_GrKm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("brnId")
                        .HasColumnType("int");

                    b.Property<string>("codigoFasecolda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fueId")
                        .HasColumnType("int");

                    b.Property<string>("huellaCarbono_TonKm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("linYear")
                        .HasColumnType("int");

                    b.Property<int>("typId")
                        .HasColumnType("int");

                    b.HasKey("linId");

                    b.HasIndex("brnId");

                    b.HasIndex("fueId");

                    b.HasIndex("typId");

                    b.ToTable("Lines", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.type", b =>
                {
                    b.Property<int>("typId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("typId"));

                    b.Property<string>("typName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("typId");

                    b.ToTable("Types", "hhcc");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.brandType", b =>
                {
                    b.HasOne("Finanzauto.HuellaCarbono.Domain.brand", "fkbrand")
                        .WithMany("GetBrandTypes")
                        .HasForeignKey("brnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finanzauto.HuellaCarbono.Domain.type", "fktype")
                        .WithMany("GetTypeBrands")
                        .HasForeignKey("typId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkbrand");

                    b.Navigation("fktype");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.line", b =>
                {
                    b.HasOne("Finanzauto.HuellaCarbono.Domain.brand", "fkbrands")
                        .WithMany("GetBrands")
                        .HasForeignKey("brnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finanzauto.HuellaCarbono.Domain.fuel", "fkfuel")
                        .WithMany("GetFuel")
                        .HasForeignKey("fueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finanzauto.HuellaCarbono.Domain.type", "fktypes")
                        .WithMany("GetTypes")
                        .HasForeignKey("typId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkbrands");

                    b.Navigation("fkfuel");

                    b.Navigation("fktypes");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.brand", b =>
                {
                    b.Navigation("GetBrandTypes");

                    b.Navigation("GetBrands");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.fuel", b =>
                {
                    b.Navigation("GetFuel");
                });

            modelBuilder.Entity("Finanzauto.HuellaCarbono.Domain.type", b =>
                {
                    b.Navigation("GetTypeBrands");

                    b.Navigation("GetTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
